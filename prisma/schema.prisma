generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model album {
  album_id        String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  artist_id       String            @db.Uuid
  artist          artist            @relation(fields: [artist_id], references: [artist_id], onDelete: Cascade, onUpdate: NoAction, map: "public_album_artist_id_fkey")
  section_albums  section_albums[]
  song            song[]
  user_like_album user_like_album[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model artist {
  artist_id              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                   String
  album                  album[]
  artist_contribute_song artist_contribute_song[]
  section_artists        section_artists[]
  user_following_artist  user_following_artist[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model artist_contribute_song {
  artist_id String @db.Uuid
  song_id   String @db.Uuid
  artist    artist @relation(fields: [artist_id], references: [artist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_artist_contribute_song_artist_id_fkey")
  song      song   @relation(fields: [song_id], references: [song_id], onDelete: NoAction, onUpdate: NoAction, map: "public_artist_contribute_song_song_id_fkey")

  @@id([artist_id, song_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model playlist {
  playlist_id             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at              DateTime                  @default(now()) @db.Timestamptz(6)
  user_id                 String                    @db.Uuid
  name                    String?
  description             String?
  user                    user                      @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "public_playlist_user_id_fkey")
  playlist_song           playlist_song[]
  section_playlists       section_playlists[]
  user_following_playlist user_following_playlist[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model playlist_song {
  playlist_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  song_id     String   @db.Uuid
  playlist    playlist @relation(fields: [playlist_id], references: [playlist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_playlist_song_playlist_id_fkey")
  song        song     @relation(fields: [song_id], references: [song_id], onDelete: NoAction, onUpdate: NoAction, map: "public_playlist_song_song_id_fkey")

  @@id([playlist_id, song_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model song {
  song_id                String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  album_id               String                   @db.Uuid
  name                   String
  lyrics                 String?
  duration_ms            Float                    @default(0) @db.Real
  artist_contribute_song artist_contribute_song[]
  playlist_song          playlist_song[]
  album                  album                    @relation(fields: [album_id], references: [album_id], onDelete: Cascade, onUpdate: NoAction, map: "public_song_album_id_fkey")
  user_like_song         user_like_song[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user {
  user_id                                                String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                                                   String
  playlist                                               playlist[]
  user_following_artist                                  user_following_artist[]
  user_following_playlist                                user_following_playlist[]
  user_following_user_user_following_user_user1_idTouser user_following_user[]     @relation("user_following_user_user1_idTouser")
  user_following_user_user_following_user_user2_idTouser user_following_user[]     @relation("user_following_user_user2_idTouser")
  user_like_album                                        user_like_album[]
  user_like_song                                         user_like_song[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_following_artist {
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  artist_id  String   @db.Uuid
  artist     artist   @relation(fields: [artist_id], references: [artist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_artist_artist_id_fkey")
  user       user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_artist_user_id_fkey")

  @@id([user_id, artist_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_following_playlist {
  user_id     String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  playlist_id String   @db.Uuid
  playlist    playlist @relation(fields: [playlist_id], references: [playlist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_playlist_playlist_id_fkey")
  user        user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_playlist_user_id_fkey")

  @@id([user_id, playlist_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_following_user {
  user1_id                                String   @db.Uuid
  created_at                              DateTime @default(now()) @db.Timestamptz(6)
  user2_id                                String   @db.Uuid
  user_user_following_user_user1_idTouser user     @relation("user_following_user_user1_idTouser", fields: [user1_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_user_user1_id_fkey")
  user_user_following_user_user2_idTouser user     @relation("user_following_user_user2_idTouser", fields: [user2_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_following_user_user2_id_fkey")

  @@id([user1_id, user2_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_like_album {
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  album_id   String   @db.Uuid
  album      album    @relation(fields: [album_id], references: [album_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_like_album_album_id_fkey")
  user       user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_like_album_user_id_fkey")

  @@id([user_id, album_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_like_song {
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  song_id    String   @db.Uuid
  song       song     @relation(fields: [song_id], references: [song_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_like_song_song_id_fkey")
  user       user     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "public_user_like_song_user_id_fkey")

  @@id([user_id, song_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model section {
  section_id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String?
  created_at        DateTime?           @default(now()) @db.Timestamptz(6)
  section_albums    section_albums[]
  section_artists   section_artists[]
  section_playlists section_playlists[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model section_albums {
  section_id String    @db.Uuid
  album_id   String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  album      album     @relation(fields: [album_id], references: [album_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_albums_album_id_fkey")
  section    section   @relation(fields: [section_id], references: [section_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_albums_section_id_fkey")

  @@id([section_id, album_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model section_artists {
  section_id String    @db.Uuid
  artist_id  String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  artist     artist    @relation(fields: [artist_id], references: [artist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_artists_artist_id_fkey")
  section    section   @relation(fields: [section_id], references: [section_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_artists_section_id_fkey")

  @@id([section_id, artist_id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model section_playlists {
  section_id  String    @db.Uuid
  playlist_id String    @db.Uuid
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  playlist    playlist  @relation(fields: [playlist_id], references: [playlist_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_playlists_playlist_id_fkey")
  section     section   @relation(fields: [section_id], references: [section_id], onDelete: NoAction, onUpdate: NoAction, map: "public_section_playlists_section_id_fkey")

  @@id([section_id, playlist_id])
}
